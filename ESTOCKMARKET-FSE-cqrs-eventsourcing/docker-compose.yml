version: "3"
services:
  mysql-service:
    image: mysql:5.7
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=estockmarket
      - MYSQL_TCP_PORT= 3307
    ports:
    - 3307:3307
    expose:
      - 3307      
  mongo-service:
    image: mongo
    command: mongod --port 27018
    ports:
      - 27018:27018
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
  zookeeper:
    image: docker.io/confluentinc/cp-zookeeper:6.1.1
    ports:
      - "2182:2182"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182

  # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    image: docker.io/confluentinc/cp-kafka:6.1.1
    depends_on:
      - zookeeper
    ports:
      - '9094:9094'
    expose:
      - '29094'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2182'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29094 --create --if-not-exists --topic createUser --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29094 --create --if-not-exists --topic createCompany --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29094 --create --if-not-exists --topic removeCompany --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29094 --create --if-not-exists --topic createSector --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29094 --create --if-not-exists --topic removeSector --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29094 --create --if-not-exists --topic createStock --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29094 --create --if-not-exists --topic updateStock --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29094 --create --if-not-exists --topic removeStock --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29094 --list
      "
  eureka-server:
    image: eureka
    container_name: eureka-service
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "8090:8090"
    environment:
      - JAVA_OPTS=
         -DEUREKA_SERVER=http://discovery:8761/eureka
  zuul-gateway:
    image: zuul
    container_name: zuul-service
    build:
      context: ./zuul-api-gateway
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "8989:8989"
    depends_on:
      - eureka-server
  
  estockmarket-command-service:
    image: command
    container_name: command-service
    build:
      context: ./estockmarket-command
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "9093:9093"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-service:3307/estockmarket?createDatabaseIfNotExist=true
    depends_on:
      - eureka-server
      - zuul-gateway
      - mysql-service
  estockmarket-query-service:
    image: query
    container_name: query-service
    build:
      context: ./estockmarket-query
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "9091:9091"
    depends_on:
      - eureka-server
      - zuul-gateway
      - mongo-service